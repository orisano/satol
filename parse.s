// Code generated by command: go run asm.go -out parse.s -stubs stub.go. DO NOT EDIT.

// +build amd64

#include "textflag.h"

DATA zeros<>+0(SB)/8, $0xcfcfcfcfcfcfcfd0
DATA zeros<>+8(SB)/8, $0xcfcfcfcfcfcfcfd0
GLOBL zeros<>(SB), RODATA|NOPTR, $16

DATA mul8<>+0(SB)/4, $0x010a010a
DATA mul8<>+4(SB)/4, $0x010a010a
DATA mul8<>+8(SB)/4, $0x010a010a
DATA mul8<>+12(SB)/4, $0x010a010a
GLOBL mul8<>(SB), RODATA|NOPTR, $16

DATA mul16<>+0(SB)/4, $0x00010064
DATA mul16<>+4(SB)/4, $0x00010064
DATA mul16<>+8(SB)/4, $0x00010064
DATA mul16<>+12(SB)/4, $0x00010064
GLOBL mul16<>(SB), RODATA|NOPTR, $16

DATA mul16Low<>+0(SB)/2, $0x2710
DATA mul16Low<>+2(SB)/2, $0x0001
DATA mul16Low<>+4(SB)/2, $0x2710
DATA mul16Low<>+6(SB)/2, $0x0001
DATA mul16Low<>+8(SB)/2, $0x0000
DATA mul16Low<>+10(SB)/2, $0x0000
DATA mul16Low<>+12(SB)/2, $0x0000
DATA mul16Low<>+14(SB)/2, $0x0000
GLOBL mul16Low<>(SB), RODATA|NOPTR, $16

// func Parse16SSE(s string) uint64
// Requires: SSE2, SSE3, SSE4.1, SSSE3
TEXT 路Parse16SSE(SB), NOSPLIT, $0-24
	MOVQ      s_base+0(FP), CX
	LDDQU     (CX), X0
	PADDQ     zeros<>+0(SB), X0
	PMADDUBSW mul8<>+0(SB), X0
	PMADDWL   mul16<>+0(SB), X0
	PACKUSDW  X0, X0
	PMADDWL   mul16Low<>+0(SB), X0
	MOVQ      X0, AX
	MOVQ      AX, CX
	ANDQ      $0x7fffffff, CX
	IMUL3Q    $0x05f5e100, CX, CX
	SARQ      $0x20, AX
	ADDQ      CX, AX
	MOVQ      AX, ret+16(FP)
	RET

// func Parse16AVX(s string) uint64
// Requires: AVX
TEXT 路Parse16AVX(SB), NOSPLIT, $0-24
	MOVQ       s_base+0(FP), CX
	VLDDQU     (CX), X0
	VPADDQ     zeros<>+0(SB), X0, X0
	VPMADDUBSW mul8<>+0(SB), X0, X0
	VPMADDWD   mul16<>+0(SB), X0, X0
	VPACKUSDW  X0, X0, X0
	VPMADDWD   mul16Low<>+0(SB), X0, X0
	VMOVQ      X0, AX
	MOVQ       AX, CX
	ANDQ       $0x7fffffff, CX
	IMUL3Q     $0x05f5e100, CX, CX
	SARQ       $0x20, AX
	ADDQ       CX, AX
	MOVQ       AX, ret+16(FP)
	RET

// func Parse8SSE(s string) uint64
// Requires: SSE2, SSE4.1, SSSE3
TEXT 路Parse8SSE(SB), NOSPLIT, $0-24
	MOVQ      s_base+0(FP), CX
	MOVQ      (CX), X0
	PADDQ     zeros<>+0(SB), X0
	PSHUFD    $0x44, X0, X0
	PMADDUBSW mul8<>+0(SB), X0
	PMADDWL   mul16<>+0(SB), X0
	PACKUSDW  X0, X0
	PMADDWL   mul16Low<>+0(SB), X0
	MOVQ      X0, AX
	SARQ      $0x20, AX
	MOVQ      AX, ret+16(FP)
	RET

// func Parse8AVX(s string) uint64
// Requires: AVX
TEXT 路Parse8AVX(SB), NOSPLIT, $0-24
	MOVQ       s_base+0(FP), CX
	VMOVQ      (CX), X0
	VPADDQ     zeros<>+0(SB), X0, X0
	VPSHUFD    $0x44, X0, X0
	VPMADDUBSW mul8<>+0(SB), X0, X0
	VPMADDWD   mul16<>+0(SB), X0, X0
	VPACKUSDW  X0, X0, X0
	VPMADDWD   mul16Low<>+0(SB), X0, X0
	VMOVQ      X0, AX
	SARQ       $0x20, AX
	MOVQ       AX, ret+16(FP)
	RET
